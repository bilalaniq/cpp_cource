// ---------------------------------------------code injection vulernerability-----------------------------
/*

A code injection vulnerability occurs when an attacker is able to insert and execute malicious code within a target application 
or system. This type of vulnerability arises due to insecure coding practices that allow external input to be interpreted as 
executable code by the application.

There are several common types of code injection vulnerabilities:

SQL Injection (SQLi): In SQL injection attacks, attackers exploit vulnerabilities in web applications that use user-supplied 
data in SQL queries without proper sanitization. By injecting malicious SQL code, attackers can manipulate the database, extract
sensitive information, or even gain unauthorized access to the system.

Cross-Site Scripting (XSS): XSS vulnerabilities occur when a web application allows attackers to inject malicious scripts into 
web pages viewed by other users. These scripts can steal cookies, session tokens, or other sensitive information from users, or 
perform actions on behalf of the victim.

Command Injection: Command injection vulnerabilities arise when an application allows user-supplied input to be executed as 
system commands without proper validation. Attackers can exploit these vulnerabilities to execute arbitrary commands on the 
underlying operating system, potentially gaining unauthorized access or performing malicious actions.


Remote Code Execution (RCE): RCE vulnerabilities allow attackers to execute arbitrary code on a target system. 
These vulnerabilities typically arise due to insecure deserialization, insecure file upload functionalities, or other insecure 
input handling mechanisms.




--------------------------------------------solution------------------------------------------
Mitigating code injection vulnerabilities involves implementing secure coding practices such as input validation, parameterized 
queries, and output encoding to prevent attackers from injecting and executing malicious code. Additionally, developers should 
follow the principle of least privilege, ensuring that applications and systems have only the minimum permissions necessary to 
perform their intended functions. Regular security audits and penetration testing can help identify and remediate code injection 
vulnerabilities before they can be exploited by attackers.





if you want to learn about sqli click here
*/
#include"sqli.cpp"
// if you want to learn about xss click here 
#include"xss.cpp"
// if you want to learn about Commandinjection vulnerabilities click here 
#include"Commandinjection.cpp"
// if you wantto learn about remote code execution click here 
#include"rce.cpp"
